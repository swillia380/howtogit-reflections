How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It showed the lines that had changed between the two versions, narrowing down the area where the bug could be.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Allows me to determine when bugs might have appeared, regress to previous iterations when desired, observe previously attempted code to prevent retrying unsuccessful solutions.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manually choosing when to save would allow for more logical progressions of commits, but may suffer from user error when one forgets to commit or makes strangely grouped commits.  Automatically saving is useful for not losing progress with unexpected losses and does not rely on the users judgement for saving, but likely saves many more versions than are necessary.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    In some version control systems, multiple files and their relations may be important to an overall project, while in others like Google Docs documents are largely independent.

How can you use the commands git log and git diff to view the history of files?

    git log will show the history of commits. git diff can be used to view the changes between two commits.

How might using version control make you more confident to make changes that
could break something?

    If something breaks it can be reverted.

Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here
